@{
    ViewData["Title"] = "Exam";
    var examId = ViewData["ExamId"];
}
<head>
    <link rel="stylesheet" href="~/css/exam.css" asp-append-version="true" />
</head>

<div class="exam-container">
    <div class="exam-header">
        <h2 class="exam-title">Final Exam: Data Structures and Algorithms</h2>
        <div class="exam-info">
            <div id="timeRemaining" class="timer">Time Remaining: 60:00</div>
            <div class="student-info">
                Student: @User.FindFirst(System.Security.Claims.ClaimTypes.Name)?.Value
            </div>
        </div>
    </div>
    <div class="exam-content">
        <form id="examForm" class="question-container">
            <div class="question-block">
                <h3>Question 1 (20 points)</h3>
                <p>What is the time complexity of QuickSort in the worst case scenario?</p>
                <div class="options">
                    <div class="option">
                        <input type="radio" id="q1_a" name="q1" value="a" required>
                        <label for="q1_a">O(n)</label>
                    </div>
                    <div class="option">
                        <input type="radio" id="q1_b" name="q1" value="b">
                        <label for="q1_b">O(n log n)</label>
                    </div>
                    <div class="option">
                        <input type="radio" id="q1_c" name="q1" value="c">
                        <label for="q1_c">O(n²)</label>
                    </div>
                    <div class="option">
                        <input type="radio" id="q1_d" name="q1" value="d">
                        <label for="q1_d">O(log n)</label>
                    </div>
                </div>
            </div>
            <div class="question-block">
                <h3>Question 2 (30 points)</h3>
                <p>Explain how a hash table handles collisions using the chaining method.</p>
                <textarea name="q2" rows="4" required placeholder="Enter your answer here..."></textarea>
            </div>
            <div class="question-block">
                <h3>Question 3 (25 points)</h3>
                <p>Which of the following data structures would be most efficient for implementing a cache?</p>
                <div class="options">
                    <div class="option">
                        <input type="radio" id="q3_a" name="q3" value="a" required>
                        <label for="q3_a">Array</label>
                    </div>
                    <div class="option">
                        <input type="radio" id="q3_b" name="q3" value="b">
                        <label for="q3_b">Linked List</label>
                    </div>
                    <div class="option">
                        <input type="radio" id="q3_c" name="q3" value="c">
                        <label for="q3_c">Hash Table</label>
                    </div>
                    <div class="option">
                        <input type="radio" id="q3_d" name="q3" value="d">
                        <label for="q3_d">Binary Search Tree</label>
                    </div>
                </div>
            </div>

            <div class="question-block">
                <h3>Question 4 (25 points)</h3>
                <p>Write a short code snippet in any programming language to implement a stack using an array.</p>
                <textarea name="q4" rows="6" required
                          placeholder="Write your code here..."></textarea>
            </div>

            <div class="exam-controls">
                <button type="submit" id="submitExam" class="btn btn-primary">Submit Exam</button>
                <button type="button" id="saveProgress" class="btn btn-secondary">Save Progress</button>
            </div>
        </form>
    </div>

    <div id="detectionAlerts"></div>
</div>

<div id="confirmSubmitModal" class="modal fade" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Submission</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to submit your exam? This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmSubmit">Submit</button>
            </div>
        </div>
    </div>
</div>

<script>
    let isExamActive = true;
    let timeLeft = 10 * 60; // 60 minutes in seconds

    window.onload = function () {
        var examId = @Model;
        startDetectionPolling(examId);
        startExamTimer();
        setupFormHandling();
    };

    window.onbeforeunload = function (e) {
        if (isExamActive) {
            e.preventDefault();
            e.returnValue = '';
            return 'Are you sure you want to leave? Your exam progress will be lost.';
        }
    };

    function startExamTimer() {
        const timerElement = document.getElementById('timeRemaining');

        const timer = setInterval(() => {
            if (!isExamActive) {
                clearInterval(timer);
                return;
            }

            timeLeft--;

            const minutes = Math.floor(timeLeft / 60);
            const seconds = timeLeft % 60;
            timerElement.textContent = `Time Remaining: ${minutes}:${seconds.toString().padStart(2, '0')}`;

            if (timeLeft <= 300) { // Last 5 minutes
                timerElement.style.color = '#dc3545';
                if (!timerElement.classList.contains('blink')) {
                    timerElement.classList.add('blink');
                }
            }

            if (timeLeft <= 0) {
                clearInterval(timer);
                submitExam(true);
            }
        }, 1000);
    }

    function setupFormHandling() {
        const form = document.getElementById('examForm');
        const submitBtn = document.getElementById('submitExam');
        const confirmSubmitBtn = document.getElementById('confirmSubmit');
        const modal = new bootstrap.Modal(document.getElementById('confirmSubmitModal'));

        form.addEventListener('submit', (e) => {
            e.preventDefault();
            modal.show();
        });

        confirmSubmitBtn.addEventListener('click', () => {
            modal.hide();
            submitExam(false);
        });

        // Auto-save every minute
        setInterval(() => {
            if (isExamActive) {
                saveExamProgress();
            }
        }, 60000);

        document.getElementById('saveProgress').addEventListener('click', () => {
            saveExamProgress();
            showSaveNotification();
        });
    }

    async function submitExam(isTimeUp) {
        if (!isExamActive) return;

        const form = document.getElementById('examForm');
        const formData = new FormData(form);
        const examData = Object.fromEntries(formData.entries());

        try {
            const response = await fetch(`/Student/SubmitExam?examId=${examId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(examData)
            });

            if (response.ok) {
                isExamActive = false;
                await stopExam();

                if (isTimeUp) {
                    alert('Time is up! Your exam has been submitted.');
                } else {
                    alert('Exam submitted successfully!');
                }

                window.location.href = '/Student/ExamComplete';
            } else {
                alert('Failed to submit exam. Please try again.');
            }
        } catch (error) {
            console.error('Error submitting exam:', error);
            alert('Error submitting exam. Please try again.');
        }
    }

    async function saveExamProgress() {
        const form = document.getElementById('examForm');
        const formData = new FormData(form);
        const examData = Object.fromEntries(formData.entries());

        try {
            const response = await fetch(`/Student/SaveExamProgress?examId=${examId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(examData)
            });

            if (!response.ok) {
                console.error('Failed to save progress');
            }
        } catch (error) {
            console.error('Error saving progress:', error);
        }
    }

    function showSaveNotification() {
        const alertDiv = document.createElement('div');
        alertDiv.className = 'alert alert-success';
        alertDiv.style.position = 'fixed';
        alertDiv.style.top = '20px';
        alertDiv.style.right = '20px';
        alertDiv.style.padding = '15px';
        alertDiv.style.zIndex = '1000';
        alertDiv.textContent = 'Progress saved successfully!';

        document.body.appendChild(alertDiv);
        setTimeout(() => alertDiv.remove(), 3000);
    }

    // Previous detection polling and alert code remains the same
    function startDetectionPolling(examId) {
        async function pollDetections() {
            if (!isExamActive) return;
            try {
                const response = await fetch(`/Student/GetDetectionResults?examId=${examId}`);
                const data = await response.json();
                if (data.detections && data.detections.length > 0) {
                    data.detections.forEach(function (detection) {
                        if (detection) {
                            showDetectionAlert(detection);
                        }
                    });
                }
                setTimeout(() => pollDetections(), 1000);
            } catch (error) {
                console.error("Error fetching detection results:", error);
                setTimeout(() => pollDetections(), 1000);
            }
        }
        pollDetections();
    }

    function showDetectionAlert(detection) {
        const alertDiv = document.createElement('div');
        alertDiv.className = 'alert alert-danger';
        alertDiv.style.position = 'fixed';
        alertDiv.style.top = '20px';
        alertDiv.style.right = '20px';
        alertDiv.style.padding = '15px';
        alertDiv.style.backgroundColor = '#f8d7da';
        alertDiv.style.border = '1px solid #f5c6cb';
        alertDiv.style.borderRadius = '4px';
        alertDiv.style.zIndex = '1000';
        alertDiv.textContent = `⚠️ Cheating Detected: ${detection}`;
        document.body.appendChild(alertDiv);
        setTimeout(() => alertDiv.remove(), 3000);
    }

    async function stopExam() {
        isExamActive = false;
        try {
            await fetch(`/Student/StopExam?examId=${examId}`);
        } catch (error) {
            console.error("Error stopping exam:", error);
        }
    }
</script>