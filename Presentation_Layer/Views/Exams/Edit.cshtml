@model Presentation_Layer.ViewModels.ExamViewModel

@{
    ViewData["Title"] = "Edit Exam";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container p-3">
    <div class="row pt-4">
        <div class="col-md-8 offset-md-2">
            <h2 class="text-primary">Edit Exam</h2>
            <div class="card">
                <div class="card-body">
                    <form asp-action="Edit" method="post">
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                        <input type="hidden" asp-for="Id" />
                        <input type="hidden" asp-for="CourseId" />

                        <div class="mb-3">
                            <label asp-for="CourseName" class="form-label">Course</label>
                            <input asp-for="CourseName" class="form-control" readonly />
                        </div>

                        <div class="mb-3">
                            <label asp-for="Subject" class="form-label">Subject</label>
                            <input asp-for="Subject" class="form-control" />
                            <span asp-validation-for="Subject" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Code" class="form-label">Exam Code</label>
                            <input asp-for="Code" class="form-control" />
                            <span asp-validation-for="Code" class="text-danger"></span>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label asp-for="Date" class="form-label">Date</label>
                                <input asp-for="Date" class="form-control" type="date" />
                                <span asp-validation-for="Date" class="text-danger"></span>
                            </div>

                            <div class="col-md-6 mb-3">
                                <label asp-for="DurationMinutes" class="form-label">Duration (minutes)</label>
                                <input asp-for="DurationMinutes" class="form-control" type="number" min="1" />
                                <span asp-validation-for="DurationMinutes" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="mb-3">
                            <h4>Questions</h4>
                            <div id="questions-container">
                                @for (int i = 0; i < Model.Questions.Count; i++)
                                {
                                    <div class="card mb-3 question-card">
                                        <div class="card-header d-flex justify-content-between align-items-center">
                                            <h5>Question @(i + 1)</h5>
                                            @if (i > 0 || Model.Questions.Count > 1)
                                            {
                                                <button type="button" class="btn btn-danger btn-sm remove-question">Remove</button>
                                            }
                                        </div>
                                        <div class="card-body">
                                            <input type="hidden" asp-for="Questions[i].Id" />

                                            <div class="mb-3">
                                                <label class="form-label">Question Text</label>
                                                <input asp-for="Questions[i].QuestionText" class="form-control" />
                                                <span asp-validation-for="Questions[i].QuestionText" class="text-danger"></span>
                                            </div>

                                            <div class="mt-3 mb-2">
                                                <label class="control-label">Choices</label>
                                                <small class="text-muted d-block mb-2">Select the radio button next to the correct answer.</small>
                                            </div>

                                            <div class="choices-container">
                                                @for (int j = 0; j < Model.Questions[i].Choices.Count; j++)
                                                {
                                                    <div class="input-group mb-2 choice-item">
                                                        <div class="input-group-prepend">
                                                            <div class="input-group-text">
                                                                <input type="radio" name="Questions[@i].CorrectChoiceIndex" value="@j"
                                                                @(Model.Questions[i].CorrectChoiceIndex == j ? "checked" : "") required />
                                                            </div>
                                                        </div>
                                                        <input type="hidden" name="Questions[@i].Choices[@j].Id" value="@Model.Questions[i].Choices[j].Id" />
                                                        <input name="Questions[@i].Choices[@j].ChoiceText" class="form-control"
                                                               value="@Model.Questions[i].Choices[j].ChoiceText" placeholder="Choice @(j + 1)" required />
                                                        @if (j > 1)
                                                        {
                                                            <div class="input-group-append">
                                                                <button class="btn btn-outline-danger remove-choice" type="button">
                                                                    <i class="bi bi-trash"></i>
                                                                </button>
                                                            </div>
                                                        }
                                                    </div>
                                                }
                                            </div>

                                            @if (Model.Questions[i].Choices.Count < 4)
                                            {
                                                <button type="button" class="btn btn-outline-primary btn-sm add-choice mt-2">
                                                    Add Choice
                                                </button>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                            <button type="button" id="add-question" class="btn btn-success">Add Question</button>
                        </div>

                        <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-3">
                            <a asp-controller="Course" asp-action="Index" class="btn btn-secondary me-md-2">Back to Courses</a>
                            <button type="submit" class="btn btn-primary">Save Changes</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        $(document).ready(function () {
            // Add new question
            $("#add-question").click(function () {
                var questionCount = $(".question-card").length;
                var newQuestion = `
                            <div class="card mb-3 question-card">
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <h5>Question ${questionCount + 1}</h5>
                                    <button type="button" class="btn btn-danger btn-sm remove-question">Remove</button>
                                </div>
                                <div class="card-body">
                                    <input type="hidden" name="Questions[${questionCount}].Id" value="0" />

                                    <div class="mb-3">
                                        <label class="form-label">Question Text</label>
                                        <input name="Questions[${questionCount}].QuestionText" class="form-control" required />
                                        <span class="text-danger field-validation-valid" data-valmsg-for="Questions[${questionCount}].QuestionText" data-valmsg-replace="true"></span>
                                    </div>

                                    <div class="mt-3 mb-2">
                                        <label class="control-label">Choices</label>
                                        <small class="text-muted d-block mb-2">Select the radio button next to the correct answer.</small>
                                    </div>

                                    <div class="choices-container">
                                        <div class="input-group mb-2 choice-item">
                                            <div class="input-group-prepend">
                                                <div class="input-group-text">
                                                    <input type="radio" name="Questions[${questionCount}].CorrectChoiceIndex" value="0" checked required />
                                                </div>
                                            </div>
                                            <input type="hidden" name="Questions[${questionCount}].Choices[0].Id" value="0" />
                                            <input name="Questions[${questionCount}].Choices[0].ChoiceText" class="form-control" placeholder="Choice 1" required />
                                        </div>

                                        <div class="input-group mb-2 choice-item">
                                            <div class="input-group-prepend">
                                                <div class="input-group-text">
                                                    <input type="radio" name="Questions[${questionCount}].CorrectChoiceIndex" value="1" required />
                                                </div>
                                            </div>
                                            <input type="hidden" name="Questions[${questionCount}].Choices[1].Id" value="0" />
                                            <input name="Questions[${questionCount}].Choices[1].ChoiceText" class="form-control" placeholder="Choice 2" required />
                                        </div>
                                    </div>

                                    <button type="button" class="btn btn-outline-primary btn-sm add-choice mt-2">
                                        Add Choice
                                    </button>
                                </div>
                            </div>
                        `;
                $("#questions-container").append(newQuestion);
                updateQuestionNumbers();
            });

            // Remove question (using event delegation)
            $(document).on("click", ".remove-question", function () {
                if ($(".question-card").length > 1) {
                    $(this).closest(".question-card").remove();
                    updateQuestionNumbers();
                    reindexQuestions();
                } else {
                    alert("At least one question is required.");
                }
            });

            // Add choice to a question
            $(document).on("click", ".add-choice", function () {
                const questionCard = $(this).closest(".question-card");
                const choicesContainer = questionCard.find(".choices-container");
                const choiceCount = choicesContainer.find(".choice-item").length;

                if (choiceCount >= 4) {
                    return; // Maximum 4 choices
                }

                // Get the question index
                const questionIdx = $(".question-card").index(questionCard);

                const newChoice = `
                            <div class="input-group mb-2 choice-item">
                                <div class="input-group-prepend">
                                    <div class="input-group-text">
                                        <input type="radio" name="Questions[${questionIdx}].CorrectChoiceIndex" value="${choiceCount}" required />
                                    </div>
                                </div>
                                <input type="hidden" name="Questions[${questionIdx}].Choices[${choiceCount}].Id" value="0" />
                                <input name="Questions[${questionIdx}].Choices[${choiceCount}].ChoiceText" class="form-control" placeholder="Choice ${choiceCount + 1}" required />
                                <div class="input-group-append">
                                    <button class="btn btn-outline-danger remove-choice" type="button">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </div>
                        `;

                choicesContainer.append(newChoice);

                // Hide the "Add Choice" button if we've reached 4 choices
                if (choiceCount + 1 >= 4) {
                    $(this).hide();
                }
            });

            // Remove a choice
            $(document).on("click", ".remove-choice", function () {
                const questionCard = $(this).closest(".question-card");
                const choicesContainer = questionCard.find(".choices-container");
                const choiceItem = $(this).closest(".choice-item");

                if (choicesContainer.find(".choice-item").length > 2) {
                    // Get the index of this choice
                    const choiceIndex = choiceItem.index();

                    // Remove the choice
                    choiceItem.remove();

                    // Update the indices of remaining choices
                    const questionIdx = $(".question-card").index(questionCard);
                    choicesContainer.find(".choice-item").each(function (idx) {
                        $(this).find('input[type="radio"]').attr("value", idx);
                        $(this).find('input[type="text"], input[type="hidden"]').each(function () {
                            var name = $(this).attr("name");
                            if (name && name.includes("Choices")) {
                                $(this).attr("name", name.replace(/Choices\[\d+\]/, `Choices[${idx}]`));
                                $(this).attr("placeholder", `Choice ${idx + 1}`);
                            }
                        });
                    });

                    // Show the "Add Choice" button since we now have fewer than 4 choices
                    questionCard.find(".add-choice").show();
                } else {
                    alert("You must have at least 2 choices.");
                }
            });

            function updateQuestionNumbers() {
                $(".question-card").each(function (index) {
                    $(this).find("h5").text("Question " + (index + 1));
                });
            }

            function reindexQuestions() {
                $(".question-card").each(function (index) {
                    $(this).find("[name^='Questions[']").each(function () {
                        var name = $(this).attr('name');
                        var newName = name.replace(/Questions\[\d+\]/, `Questions[${index}]`);
                        $(this).attr('name', newName);
                    });
                });
            }
        });
    </script>
}